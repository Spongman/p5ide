"undefined"==typeof DEBUG&&(DEBUG=!0),function(e,n){"use strict";"function"==typeof define&&define.amd?define(n(e)):"object"==typeof exports?module.exports=n(e):e.loopProtect=n(e)}(this,function(e){"use strict";let n=null,t=/\b(for|while|do)\b/g,i=/\b(for|while|do)\b/,o=/\b(?!default:)([a-z_]{1}\w+:)/i,r=/(?:\/\*(?:[\s\S]*?)\*\/)|(?:([\s;])+\/\/(?:.*)$)/gm,l=function(e,f){let a=[],c=e.split("\n"),d=!1,g=l.alias,h={},p={},b=null;function E(e,n,t){return n.slice(0,t)+"{;"+g+"("+e+", true); "+n.slice(t)}f||(f=0);return c.forEach(function(e,l){if(t.lastIndex=0,o.lastIndex=0,d)return;-1!==e.toLowerCase().indexOf("noprotect")&&(d=!0);let B=-1,D=-1,G=l,U=l-f+1,m="",x=!1,w=!1,v=!1,y=e.match(t)||[],O=y.length?y[0]:"",k=e.match(o)||[],j=0,I=0,C=!1;if(k.length&&(DEBUG&&n("- label match"),u(B=e.indexOf(k[1]),e)?DEBUG&&n("- ignored label in string or comment"):s(l,c)?DEBUG&&n("- ignored label in multline comment"):function(e,t,l){i.lastIndex=0,o.lastIndex=0;let s=!1,u=l.slice(t).join("\n").substr(e).replace(o,"");return u.replace(i,function(e,t,i){let o=u.substr(0,i).replace(r,"").trim();DEBUG&&n("- directlyBeforeLoop: "+o),0===o.length&&(s=!0)}),s}(B,l,c)?(DEBUG&&n('- found a label: "'+k[0]+'"'),b=l):DEBUG&&n('- ignored "label", false positive')),h[l])DEBUG&&n(" -exit: ignoring line "+l+": "+e);else{if(p[l])return DEBUG&&n("- exit: ignoring, but adding line "+l+": "+e),void a.push(e);if(O&&1===y.length&&-1===e.indexOf("jsbin")){if(DEBUG&&n("match on "+O+"\n"),x="do"===O,D=B=e.indexOf(O),u(B,e))return void a.push(e);if(s(l,c))return void a.push(e);for((B=e.indexOf(O)+O.length)===e.length&&B===e.length&&l<c.length-1&&(DEBUG&&n("- moving to next line"),a.push(e),e=c[++l],h[l]=!0,B=0);B<e.length;){if("("===(m=e.substr(B,1))&&j++,")"===m&&0==--j&&!1===v&&(v=B),"{"===m&&I++,"}"===m&&I--,0===j&&(";"===m||"{"===m)){if(";"===m)l!==G?(DEBUG&&n("- multiline inline loop"),a[G]=a[G].substring(0,v+1)+"{\nif ("+g+"("+U+")) break;\n"+a[G].substring(v+1),e+="\n}}\n"):(DEBUG&&n("- single line inline loop"),e=e.substring(0,v+1)+"{\nif ("+g+"("+U+")) break;\n"+e.substring(v+1)+"\n}}\n"),C=!0;else if("{"===m){DEBUG&&n("- multiline with braces");let t=";\nif ("+g+"("+U+")) break;\n";e=e.substring(0,B+1)+t+e.substring(B+1),B+=t.length}if(l===G&&null===b?(DEBUG&&n("- simple reset insert"),e=E(U,e,D),B+=(";"+g+"("+l+", true); ").length):null===b?(DEBUG&&n("- reset inserted above original line"),a[G]=E(U,a[G],D)):(DEBUG&&n("- reset inserted above matched label on line "+b),void 0===a[b]&&(b--,D=0),a[b]=E(U,a[b],D),b=null),x){for(DEBUG&&n("searching for closing `while` statement for: "+e),w=!1;B<e.length;){if("{"===(m=e.substr(B,1))&&I++,"}"===m&&I--,w=0===I,0===I&&DEBUG&&n("outside of closure, looking for `while` statement: "+e),w&&-1!==e.indexOf("while"))return DEBUG&&n("- exit as we found `while`: "+e),e+="}",a.push(e),void(h[l]=!0);++B===e.length&&l<c.length-1&&(a.push(e),h[l]=!0,e=c[++l],DEBUG&&n(e),B=0)}return}if(C)return void a.push(e);for(DEBUG&&n("searching for closing brace of loop for: "+e);null!==e;){if(m=e.substr(B,1),DEBUG&&n(B,m,I),"{"===m&&I++,"}"===m&&0==--I)return DEBUG&&n("outside of loop, add a close brace to: "+e),e=e.substring(0,B+1)+"}"+e.substring(B+1),a.push(e),void(h[l]=!0);++B>=e.length&&(a.push(e),h[l]=!0,e=c[++l],DEBUG&&n(e),B=0)}return}++B===e.length&&l<c.length-1&&(DEBUG&&n("- moving to next line"),a.push(e),e=c[++l],h[l]=!0,B=0)}}else DEBUG&&n("regular line "+e),a.push(e)}}),DEBUG&&n("---- source ----"),DEBUG&&n(e),DEBUG&&n("---- rewrite ---"),DEBUG&&n(a.join("\n")),DEBUG&&n(""),d?e:a.join("\n")};function s(e,t){if(0===e)return!1;let i=e,o=1,r=-1,l=-1;do{if(DEBUG&&n("looking backwards "+t[i]),r=t[i].indexOf("*/"),l=t[i].indexOf("/*"),-1!==r&&o++,r===t[i].length-2&&-1!==l&&o--,-1!==l&&0===--o)return DEBUG&&n("- exit: part of a multiline comment"),!0;i-=1}while(i>=0);return!1}function u(e,t){let i;for(;--e>-1;){if('"'===(i=t.substr(e,1))||"'"===i||"."===i)return DEBUG&&n("- exit: matched inside a string or property key"),!0;if("/"===i||"*"===i){if("/"===t.substr(e-1,1))return DEBUG&&n("- exit: part of a comment"),!0}}return!1}return l.counters={},l.debug=function(e){n=e?function(){console.log.apply(console,[].slice.apply(arguments))}:function(){}},l.debug(!1),l.alias="loopProtect.protect",l.timeout=500,l.protect=function(e,n){let t=l.counters[e];t||(t=l.counters[e]={});let i=Date.now();return n&&(t.time=i,t.hit=0,t.last=0),t.hit++,i-t.time>l.timeout?(l.hit(e),!0):(t.last++,!1)},l.hit=function(n){let t="Exiting potential infinite loop at line "+n+'. To disable loop protection: add "// noprotect" to your code';e.proxyConsole?e.proxyConsole.error(t):console.error(t)},l.reset=function(){l.counters={}},l});